'use client';

import { useState, useTransition, useCallback } from "react";
import type { RawApiResponse, MalwareMetadata } from "~/interfaces/malware";
import type {NextApiResponseError, ProcessedFastAPIData} from "~/interfaces/api";

export function useMalwareData() {
  const [data, setData] = useState<ProcessedFastAPIData | null>(null);
  const [statusMessage, setStatusMessage] = useState<string | null>(null);
  const [isError, setIsError] = useState<boolean>(false);
  const [isPending, startTransition] = useTransition();

  const fetchData = useCallback(({ applyDR, drMethod, nComponents }: {
    applyDR: boolean;
    drMethod: string;
    nComponents: number;
  }) => {
    setStatusMessage(null);
    setIsError(false);
    setData(null);

    startTransition(async () => {
      setStatusMessage("Fetching data from FastAPI via Next.js API...");
      try {
        const apiUrl = new URL("/api/fastapi-data", window.location.origin);
        apiUrl.searchParams.set("apply_dr", String(applyDR));
        apiUrl.searchParams.set("dr_method", drMethod);
        apiUrl.searchParams.set("n_components", String(nComponents));

        const response = await fetch(apiUrl.toString());

        if (!response.ok) {
          const errorBody: NextApiResponseError = await response.json() as NextApiResponseError;
          throw new Error(errorBody.error || `HTTP error! status: ${response.status}`);
        }

        const result: { success: boolean; data?: RawApiResponse; error?: string; message?: string } = await response.json() as { success: boolean; data?: RawApiResponse; error?: string; message?: string };

        if (result.success && result.data) {
          if (!result.data.results || !Array.isArray(result.data.results)) {
            throw new Error("API response is malformed: missing 'results' array.");
          }
          const embeddings: number[][] = [];
          const metadataList: MalwareMetadata[] = [];
          for (const item of result.data.results) {
            embeddings.push(item.embedding);
            metadataList.push(item.metadata);
          }
          const processedData: ProcessedFastAPIData = {
            data: embeddings,
            metadata: metadataList,
            shape: [embeddings.length, embeddings[0]?.length ?? 0],
            pacmap_applied: result.data.pacmap_applied ?? applyDR,
            message: result.data.message ?? result.message ?? "Data processed and loaded successfully.",
          };
          setData(processedData);
          setStatusMessage(processedData.message);
        } else {
          throw new Error(result.error ?? "An unknown error occurred.");
        }
      } catch (error) {
        console.error("Error in useMalwareData hook:", error);
        setStatusMessage(`Failed to fetch data: ${error instanceof Error ? error.message : String(error)}`);
        setIsError(true);
      }
    });
  }, []); // The dependency array is empty because the function's dependencies are passed as arguments.

  return { data, statusMessage, isError, isPending, fetchData };
}