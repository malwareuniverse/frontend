"use client";

import { useState, useTransition, useCallback } from "react"; // 1. Import useCallback
import type { RawApiResponse, MalwareMetadata } from "~/interfaces/malware";
import type {
  NextApiResponseError,
  ProcessedFastAPIData,
} from "~/interfaces/api";


interface FetchDataParams {
  collection: string;
  applyDR: boolean;
  drMethod: string;
  nComponents: number;
}

export function useMalwareData() {
  const [data, setData] = useState<ProcessedFastAPIData | null>(null);
  const [statusMessage, setStatusMessage] = useState<string | null>(null);
  const [isError, setIsError] = useState<boolean>(false);
  const [isPending, startTransition] = useTransition();

  const fetchData = useCallback(
    async ({
      collection,
      applyDR,
      drMethod,
      nComponents,
    }: FetchDataParams) => {
      startTransition(async () => {
        setStatusMessage("Initializing data fetch...");
        setIsError(false);
        setData(null);

        try {
          if (!collection) {
            throw new Error("A collection name must be provided to fetch data.");
          }

          setStatusMessage(`Fetching data from collection: "${collection}"...`);

          const apiUrl = new URL("/api/fastapi-data", window.location.origin);
          apiUrl.searchParams.set("collection_name", collection);
          apiUrl.searchParams.set("apply_dr", String(applyDR));
          apiUrl.searchParams.set("dr_method", drMethod);
          apiUrl.searchParams.set("n_components", String(nComponents));

          const response = await fetch(apiUrl.toString());

          if (!response.ok) {
            const errorBody = (await response.json()) as NextApiResponseError;
            throw new Error(
              errorBody.error || `HTTP error! status: ${response.status}`,
            );
          }

          const result = (await response.json()) as {
            success: boolean;
            data?: RawApiResponse;
            error?: string;
            message?: string;
          };

          if (result.success && result.data) {
            if (!result.data.results || !Array.isArray(result.data.results)) {
              throw new Error(
                "API response is malformed: missing 'results' array.",
              );
            }
            const embeddings: number[][] = [];
            const metadataList: MalwareMetadata[] = [];
            for (const item of result.data.results) {
              if (item.embedding && item.metadata) {
                embeddings.push(item.embedding);
                metadataList.push(item.metadata);
              }
            }
            const processedData: ProcessedFastAPIData = {
              data: embeddings,
              metadata: metadataList,
              shape: [embeddings.length, embeddings[0]?.length ?? 0],
              pacmap_applied: result.data.pacmap_applied ?? applyDR,
              collection_name: result.data.collection_name ?? collection,
              message:
                result.data.message ??
                result.message ??
                "Data processed and loaded successfully.",
            };
            setData(processedData);
            setStatusMessage(processedData.message);
          } else {
            throw new Error(result.error ?? "An unknown API error occurred.");
          }
        } catch (error) {
          console.error("Error in useMalwareData hook:", error);
          const errorMessage = `Failed to fetch data: ${
            error instanceof Error ? error.message : String(error)
          }`;
          setStatusMessage(errorMessage);
          setIsError(true);
          setData(null);
        }
      });
    },
    [startTransition],
  );

  return { data, statusMessage, isError, isPending, fetchData };
}